// <auto-generated />
using LoanApplication.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LoanApplication.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220712215655_AddLoanActionsToDatabase")]
    partial class AddLoanActionsToDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LoanApplication.Models.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("LoanApplication.Models.LoanAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("GiverUserId")
                        .HasColumnType("int");

                    b.Property<int>("LoanId")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TakerUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GiverUserId");

                    b.HasIndex("LoanId");

                    b.HasIndex("TakerUserId");

                    b.ToTable("LoanActions");
                });

            modelBuilder.Entity("LoanApplication.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LoanApplication.Models.LoanAction", b =>
                {
                    b.HasOne("LoanApplication.Models.User", "GiverUser")
                        .WithMany("LoanActionAsGiver")
                        .HasForeignKey("GiverUserId")
                        .IsRequired();

                    b.HasOne("LoanApplication.Models.Loan", "Loan")
                        .WithMany()
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoanApplication.Models.User", "TakerUser")
                        .WithMany("LoanActionAsTaker")
                        .HasForeignKey("TakerUserId")
                        .IsRequired();

                    b.Navigation("GiverUser");

                    b.Navigation("Loan");

                    b.Navigation("TakerUser");
                });

            modelBuilder.Entity("LoanApplication.Models.User", b =>
                {
                    b.Navigation("LoanActionAsGiver");

                    b.Navigation("LoanActionAsTaker");
                });
#pragma warning restore 612, 618
        }
    }
}
